<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExEmptyStdin" xml:space="preserve">
    <value>Stdin buffer exhausted</value>
  </data>
  <data name="ExLowerBound" xml:space="preserve">
    <value>Lower bound exceeded</value>
  </data>
  <data name="ExMaxStdout" xml:space="preserve">
    <value>Stdout buffer length limit exceeded</value>
  </data>
  <data name="ExMaxValue" xml:space="preserve">
    <value>Max value exceeded</value>
  </data>
  <data name="ExNegativeValue" xml:space="preserve">
    <value>Negative value</value>
  </data>
  <data name="ExUpperBound" xml:space="preserve">
    <value>Upper bound exceeded</value>
  </data>
  <data name="InterpreterError" xml:space="preserve">
    <value>Interpreter error</value>
  </data>
  <data name="RowTitleRun.Text" xml:space="preserve">
    <value>Row</value>
    <comment>Keep this short to 2-4 characters (abbreviate if needed)</comment>
  </data>
  <data name="run" xml:space="preserve">
    <value>run</value>
  </data>
  <data name="ShortCharacter" xml:space="preserve">
    <value>Char</value>
    <comment>Keep this short to 2-4 characters (abbreviate if needed)</comment>
  </data>
  <data name="ShortColumn" xml:space="preserve">
    <value>Col</value>
    <comment>Keep this short to 2-4 characters (abbreviate if needed)</comment>
  </data>
  <data name="ThresholdExceeded" xml:space="preserve">
    <value>Time threshold exceeded</value>
  </data>
  <data name="WrongBrackets" xml:space="preserve">
    <value>Mismatched parentheses</value>
  </data>
  <data name="RestartRun.Text" xml:space="preserve">
    <value>RESTART</value>
    <comment>Keep this uppercase</comment>
  </data>
  <data name="Exception" xml:space="preserve">
    <value>thrown</value>
  </data>
  <data name="InternalError" xml:space="preserve">
    <value>error</value>
  </data>
  <data name="SyntaxError" xml:space="preserve">
    <value>syntax error</value>
  </data>
  <data name="Threshold" xml:space="preserve">
    <value>runtime error</value>
  </data>
  <data name="Clear.Label" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="MemoryState.Label" xml:space="preserve">
    <value>Memory state</value>
  </data>
  <data name="PlayButton.Label" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="Restart.Label" xml:space="preserve">
    <value>Restart</value>
  </data>
  <data name="Undo.Label" xml:space="preserve">
    <value>Undo</value>
  </data>
  <data name="Clrscr.Label" xml:space="preserve">
    <value>Clear screen</value>
  </data>
  <data name="MemoryStateTitle" xml:space="preserve">
    <value>Memory state</value>
  </data>
  <data name="Unicode.Label" xml:space="preserve">
    <value>Show Unicode characters</value>
  </data>
  <data name="FirstControlUnicodeGroup.Value" xml:space="preserve">
    <value>0 to 31</value>
  </data>
  <data name="FirstControlUnicodeGroup.Description" xml:space="preserve">
    <value>Control characters</value>
  </data>
  <data name="SecondControlUnicodeGroup.Value" xml:space="preserve">
    <value>128 to 159</value>
  </data>
  <data name="SecondControlUnicodeGroup.Description" xml:space="preserve">
    <value>Not visible</value>
    <comment>It's talking about a series of special characters</comment>
  </data>
  <data name="UnicodeTitle" xml:space="preserve">
    <value>Unicode characters</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="BreakpointReached" xml:space="preserve">
    <value>Breakpoint reached</value>
  </data>
  <data name="ErrorLocation" xml:space="preserve">
    <value>Error location</value>
  </data>
  <data name="ErrorType" xml:space="preserve">
    <value>Error type</value>
  </data>
  <data name="Loops" xml:space="preserve">
    <value>nested loops</value>
    <comment>This will be "n nested loops"</comment>
  </data>
  <data name="MemoryCells" xml:space="preserve">
    <value>memory cells</value>
  </data>
  <data name="NoLoops" xml:space="preserve">
    <value>No nested loops</value>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Position</value>
    <comment>The position of a wrong operator in a source code</comment>
  </data>
  <data name="SingleLoop" xml:space="preserve">
    <value>1 nested loop</value>
  </data>
  <data name="SourceCode" xml:space="preserve">
    <value>Source code</value>
  </data>
  <data name="StackTrace" xml:space="preserve">
    <value>Stack trace</value>
  </data>
  <data name="Stats" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="LowercaseAtPosition" xml:space="preserve">
    <value>at position</value>
  </data>
  <data name="LowercaseOperators" xml:space="preserve">
    <value>operators</value>
  </data>
  <data name="LowercaseSingleOperator" xml:space="preserve">
    <value>1 operator</value>
  </data>
  <data name="ContinueButton.Title" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="RepeatScript.Label" xml:space="preserve">
    <value>Repeat last script</value>
  </data>
  <data name="SkipButton.Title" xml:space="preserve">
    <value>Skip</value>
  </data>
  <data name="CodeLibrary" xml:space="preserve">
    <value>Code library</value>
  </data>
  <data name="CodeLibraryButton.Label" xml:space="preserve">
    <value>Browse code library</value>
  </data>
  <data name="Favorites" xml:space="preserve">
    <value>Favorites</value>
  </data>
  <data name="MoreCodes" xml:space="preserve">
    <value>source codes</value>
  </data>
  <data name="OneCode" xml:space="preserve">
    <value>1 source code</value>
  </data>
  <data name="PersonalCodes" xml:space="preserve">
    <value>Personal codes</value>
  </data>
  <data name="RunTitle" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="SampleCodes" xml:space="preserve">
    <value>Sample codes</value>
  </data>
  <data name="0441153F-E40A-4AEC-8373-8A552697778B" xml:space="preserve">
    <value>Sum</value>
  </data>
  <data name="78BAA70A-0DAF-4BB6-B09A-CDA9537D2FFF" xml:space="preserve">
    <value>Unicode sum</value>
  </data>
  <data name="10768D40-5E3D-4787-9CB8-2A0ABBE26EFC" xml:space="preserve">
    <value>Unicode value</value>
  </data>
  <data name="SaveAsButton.Label" xml:space="preserve">
    <value>Save as</value>
  </data>
  <data name="SaveButton.Label" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="AlreadyUsed" xml:space="preserve">
    <value>Already used</value>
  </data>
  <data name="Available" xml:space="preserve">
    <value>Available</value>
  </data>
  <data name="Clipboard" xml:space="preserve">
    <value>Copy to clipboard</value>
  </data>
  <data name="CodePreviewBlock.Text" xml:space="preserve">
    <value>Code preview:</value>
  </data>
  <data name="CodeTitleBox.PlaceholderText" xml:space="preserve">
    <value>Enter the code title</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Send via email</value>
  </data>
  <data name="Empty" xml:space="preserve">
    <value>Empty</value>
    <comment>Empty title for a code to save</comment>
  </data>
  <data name="Favorite" xml:space="preserve">
    <value>Favorite</value>
    <comment>Add to favorites</comment>
  </data>
  <data name="FilenameBlock.Text" xml:space="preserve">
    <value>File name:</value>
  </data>
  <data name="OSShare" xml:space="preserve">
    <value>OS share</value>
  </data>
  <data name="Rename" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="SaveFile" xml:space="preserve">
    <value>Save file</value>
  </data>
  <data name="Share" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="Unfavorite" xml:space="preserve">
    <value>Unfavorite</value>
  </data>
  <data name="PlainText" xml:space="preserve">
    <value>Plain text</value>
  </data>
  <data name="ShareCompleted" xml:space="preserve">
    <value>Share completed</value>
  </data>
  <data name="ShareCompletedBody" xml:space="preserve">
    <value>The selected source code has been shared correctly</value>
  </data>
  <data name="SharedCode" xml:space="preserve">
    <value>Brainf*ck shared code</value>
  </data>
  <data name="ShareError" xml:space="preserve">
    <value>Share error</value>
  </data>
  <data name="ShareErrorBody" xml:space="preserve">
    <value>There was an error while sharing the code, try again later</value>
  </data>
  <data name="RenameCode" xml:space="preserve">
    <value>Rename code</value>
  </data>
  <data name="SaveCode" xml:space="preserve">
    <value>Save code</value>
  </data>
  <data name="CodeSaved" xml:space="preserve">
    <value>Code saved</value>
  </data>
  <data name="CodeSavedBody" xml:space="preserve">
    <value>The new source code has been saved correctly</value>
  </data>
  <data name="Debug" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="63156CB7-1BD1-46EA-A705-AC2ADD4A5F11" xml:space="preserve">
    <value>Header comments</value>
  </data>
  <data name="RedoButton.Label" xml:space="preserve">
    <value>Redo</value>
  </data>
  <data name="MoveButton.Label" xml:space="preserve">
    <value>Move</value>
  </data>
  <data name="NewLineButton.Label" xml:space="preserve">
    <value>New line</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutButton.Label" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="ContactsBlock.Text" xml:space="preserve">
    <value>Contacts</value>
  </data>
  <data name="DevelopedByPart2Run.Text" xml:space="preserve">
    <value>Thanks to Andrea Salvati for his help with the original interpreter algorithm, Camil Demetrescu for the idea to port Brainf*ck# to Windows 10 and Christopher Blackman for his help during the app development.</value>
  </data>
  <data name="DevelopedByRun.Text" xml:space="preserve">
    <value>Developed by</value>
  </data>
  <data name="DonationCompletedBody" xml:space="preserve">
    <value>Thank you so much for supporting Brainf*ck#!</value>
  </data>
  <data name="PurchaseCanceled" xml:space="preserve">
    <value>Purchase canceled</value>
  </data>
  <data name="PurchaseCanceledBody" xml:space="preserve">
    <value>The in-app purchase has not been completed</value>
  </data>
  <data name="RateStoreBlock.Text" xml:space="preserve">
    <value>Rate in the Store</value>
  </data>
  <data name="SomethingBadHappened" xml:space="preserve">
    <value>Something bad happened</value>
  </data>
  <data name="StoreConnectionError" xml:space="preserve">
    <value>Store connection error</value>
  </data>
  <data name="StoreConnectionErrorBody" xml:space="preserve">
    <value>The Store generated a connection error when trying to process the purchase, try again</value>
  </data>
  <data name="BreakpointNotAllowedBlock.Text" xml:space="preserve">
    <value>Can't place a breakpoint here</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Remove all</value>
    <comment>Remove all the breakpoints from the IDE</comment>
  </data>
  <data name="CSource" xml:space="preserve">
    <value>C source code</value>
  </data>
  <data name="ExportToC" xml:space="preserve">
    <value>Export C code</value>
  </data>
  <data name="ExportCompleted" xml:space="preserve">
    <value>Export completed</value>
  </data>
  <data name="ExportCompletedBody" xml:space="preserve">
    <value>The selected code has been saved successfully as a C source file</value>
  </data>
  <data name="NotModified" xml:space="preserve">
    <value>Not modified</value>
    <comment>Renamed name is the same as the original</comment>
  </data>
  <data name="ChangelogButton.Title" xml:space="preserve">
    <value>Changelog</value>
  </data>
  <data name="GuidesInfoBlock.Text" xml:space="preserve">
    <value>Guides and info</value>
  </data>
  <data name="Changelog" xml:space="preserve">
    <value>Changelog</value>
  </data>
  <data name="QuickMemoryViewerButton.ToolTipService.ToolTip" xml:space="preserve">
    <value>Quick memory view</value>
  </data>
  <data name="VirtualKeyboardButton.ToolTipService.ToolTip" xml:space="preserve">
    <value>Brainf*ck# operators keyboard</value>
  </data>
  <data name="DeleteButton.Label" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="OverflowSwitchButton.ToolTipService.ToolTip" xml:space="preserve">
    <value>Toggle overflow mode</value>
  </data>
  <data name="OverflowMode" xml:space="preserve">
    <value>Overflow mode</value>
  </data>
  <data name="OverflowModeBody" xml:space="preserve">
    <value>You have enabled the byte overflow mode. This means that the maximum value of each memory cell will now be 255 and that increasing a cell over that value (or decreasing a cell that has a value equal to 0) will cause it to overflow, ie. if it's increased from 255 it will be set to 0, and if it's decreased from 0 it will reach 255.</value>
  </data>
  <data name="ARealNinjacat" xml:space="preserve">
    <value>A real ninjacat!</value>
  </data>
  <data name="ARealNinjacatBody" xml:space="preserve">
    <value>It's great to know you're having fun with the app so far!
Would you like to post a review in the Store to support the developer?</value>
  </data>
  <data name="ConfirmBlock.Text" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="HowsItGoing" xml:space="preserve">
    <value>How's it going?</value>
  </data>
  <data name="SendMail" xml:space="preserve">
    <value>Send email</value>
  </data>
  <data name="SorryBody" xml:space="preserve">
    <value>Would you like to contact the developer and send your feedback and let him know if you're having any problems in particular?
This way he'll be able to help you!</value>
  </data>
  <data name="SorryTitle" xml:space="preserve">
    <value>Sorry about that</value>
  </data>
  <data name="Sure" xml:space="preserve">
    <value>Sure!</value>
  </data>
  <data name="ThankYouBlock1.Text" xml:space="preserve">
    <value>Thank you for downloading</value>
    <comment>This will be "Thank you for downloading Brainf*ck#!"</comment>
  </data>
  <data name="ThankYouBlock2.Text" xml:space="preserve">
    <value>Are you enjoying it so far?</value>
    <comment>It's talking about the app itself</comment>
  </data>
  <data name="AutoIndentTitle.Text" xml:space="preserve">
    <value>Auto indent brackets</value>
  </data>
  <data name="BackgroundBlur" xml:space="preserve">
    <value>Background blur</value>
  </data>
  <data name="BlurModeTitle.Text" xml:space="preserve">
    <value>Preferred blur mode</value>
  </data>
  <data name="BracketsStyleTitle.Text" xml:space="preserve">
    <value>Brackets style</value>
  </data>
  <data name="InAppBlur" xml:space="preserve">
    <value>In-app blur</value>
  </data>
  <data name="NewLine" xml:space="preserve">
    <value>New line</value>
  </data>
  <data name="SameLine" xml:space="preserve">
    <value>Same line</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SettingsButton.Label" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="TabLength.Text" xml:space="preserve">
    <value>Tab length</value>
  </data>
  <data name="TapToUnlock.Text" xml:space="preserve">
    <value>Tap to unlock</value>
  </data>
  <data name="ThemesUnlocked" xml:space="preserve">
    <value>Themes pack unlocked</value>
  </data>
  <data name="CommentRun.Text" xml:space="preserve">
    <value>Move to next cell</value>
  </data>
  <data name="CommentRun2.Text" xml:space="preserve">
    <value>Print value</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>Default</value>
    <comment>The default theme</comment>
  </data>
  <data name="AutosaveTitle.Text" xml:space="preserve">
    <value>Autosave loaded documents</value>
  </data>
  <data name="FontTypeTitle.Text" xml:space="preserve">
    <value>Font type</value>
  </data>
  <data name="IDETheme.Text" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="ShowStatusBarTitle.Text" xml:space="preserve">
    <value>Show status bar</value>
  </data>
  <data name="LowercaseAvailableSettings" xml:space="preserve">
    <value>available settings</value>
  </data>
  <data name="ThemesPackLocked" xml:space="preserve">
    <value>themes pack locked</value>
  </data>
  <data name="RenderWhitespacesTitle.Text" xml:space="preserve">
    <value>Render whitespaces</value>
  </data>
  <data name="ClearStdinBuffer.Text" xml:space="preserve">
    <value>Clear Stdin buffer on execution</value>
  </data>
  <data name="Interpreter" xml:space="preserve">
    <value>Interpreter</value>
  </data>
  <data name="ExDuplicateFunctionDefinition" xml:space="preserve">
    <value>Duplicate function definition</value>
  </data>
  <data name="ExFunctionsLimitExceeded" xml:space="preserve">
    <value>Functions limit exceeded</value>
  </data>
  <data name="ExStackLimitExceeded" xml:space="preserve">
    <value>Stack overflow exception</value>
  </data>
  <data name="ExUndefinedFunction" xml:space="preserve">
    <value>Undefined function call</value>
  </data>
  <data name="ShowPBrainButtons.Text" xml:space="preserve">
    <value>Show PBrain keyboard buttons</value>
  </data>
  <data name="StackFrames" xml:space="preserve">
    <value>stack frames</value>
  </data>
  <data name="FunctionDefinitionsTitle" xml:space="preserve">
    <value>Function definitions</value>
  </data>
  <data name="DefinedFunction" xml:space="preserve">
    <value>defined function</value>
    <comment>This will be "1 defined function"</comment>
  </data>
  <data name="DefinedFunctions" xml:space="preserve">
    <value>defined functions</value>
    <comment>This will be "n defined functions"</comment>
  </data>
  <data name="CurrentState" xml:space="preserve">
    <value>Current state</value>
  </data>
  <data name="GuideIntroduction1.Text" xml:space="preserve">
    <value>Brainf*ck is an esoteric programming language invented in 1993 by Urban Müller.</value>
  </data>
  <data name="GuideIntroduction2.Text" xml:space="preserve">
    <value>The language replicates a Turing machine, as the state of the interpreter is only described of a memory array and a memory pointer than can move back and forth and change values of the memory cells, as it passes over them.</value>
  </data>
  <data name="GuideIntroduction3.Text" xml:space="preserve">
    <value>A Brainf*ck program is made up of only 8 operators:</value>
  </data>
  <data name="GuideOperator1.Description" xml:space="preserve">
    <value>Moves the memory pointer to the next cell</value>
  </data>
  <data name="GuideOperator2.Description" xml:space="preserve">
    <value>Moves the memory pointer back</value>
  </data>
  <data name="GuideOperator3.Description" xml:space="preserve">
    <value>Increments the value of the current cell</value>
  </data>
  <data name="GuideOperator4.Description" xml:space="preserve">
    <value>Decrements the value of the current cell</value>
  </data>
  <data name="GuideOperator5.Description" xml:space="preserve">
    <value>Starts a loop on the current cell, only if its value is greater than 0</value>
  </data>
  <data name="GuideOperator6.Description" xml:space="preserve">
    <value>Loops and executes the current operators sequence if the value of the current cell is greater than 0</value>
  </data>
  <data name="GuideOperator8.Description" xml:space="preserve">
    <value>Reads a Unicode character from the Stdin buffer and stores its value in the current memory cell</value>
  </data>
  <data name="GuideOperators7Part1.Text" xml:space="preserve">
    <value>Prints the Unicode character corresponding to the value of the current memory cell. The Unicode table is available in the app, under the</value>
  </data>
  <data name="GuideOperators7Part2.Text" xml:space="preserve">
    <value>menu</value>
  </data>
  <data name="GuidePBrain.Text" xml:space="preserve">
    <value>PBrain is an extension of the Brainf*ck language, created by Paul M. Parks. It adds support for functions, with the addition of the following operators:</value>
  </data>
  <data name="GuidePBrainOperator1.Description" xml:space="preserve">
    <value>Defines a function and binds it to the value of the current memory cell</value>
  </data>
  <data name="GuidePBrainOperator2.Description" xml:space="preserve">
    <value>Ends the current function definition</value>
  </data>
  <data name="GuidePBrainOperator3.Description" xml:space="preserve">
    <value>Calls the function associated with the value of the current memory cell</value>
  </data>
  <data name="GuidePBrainWarning.Text" xml:space="preserve">
    <value>A function definition must contain at least a Brainf*ck operator and its body can't be empty. Moreover, it is not possible to define nested functions.</value>
  </data>
  <data name="GuideSamplePrintHelloComment1.Text" xml:space="preserve">
    <value>7 in cell #0</value>
  </data>
  <data name="GuideSamplePrintHelloComment2.Text" xml:space="preserve">
    <value>7 * 5 = 35 in cell #1</value>
  </data>
  <data name="GuideSamplePrintHelloComment3.Text" xml:space="preserve">
    <value>35 * 2 in cell #2 and 35 * 3 in #3</value>
  </data>
  <data name="GuideSamplePrintHelloComment4.Text" xml:space="preserve">
    <value>Back to loop start and decrement</value>
  </data>
  <data name="GuideSamplePrintHelloComment5.Text" xml:space="preserve">
    <value>Adjust the values and print</value>
  </data>
  <data name="GuideSamplePrintHelloTitle.Text" xml:space="preserve">
    <value>Print "Hello"</value>
  </data>
  <data name="GuideSampleResetComment.Text" xml:space="preserve">
    <value>Subtract 1 each time</value>
  </data>
  <data name="GuideSampleResetTitle.Text" xml:space="preserve">
    <value>Reset the current cell</value>
  </data>
  <data name="GuideSamples1.Text" xml:space="preserve">
    <value>A good strategy to learn how to code in Brainf*ck, as with everything else, is to start from simpler and smaller programs and to make them more complex along the way.</value>
  </data>
  <data name="GuideSamples2.Text" xml:space="preserve">
    <value>For example, a common operation is to reset the value of the current cell, whatever it may be.</value>
  </data>
  <data name="GuideSamples3.Text" xml:space="preserve">
    <value>A simple loop can be used in this case:</value>
  </data>
  <data name="GuideSamples4.Text" xml:space="preserve">
    <value>In many situations it is useful to make a copy of the current cell, to be able to perform some operations with its value, without losing track of the initial state of the memory cell.</value>
  </data>
  <data name="GuideSamples5.Text" xml:space="preserve">
    <value>To achieve this, it is possible to create two copies of the current value, resetting the current cell, and then move the second copy back to the first cell, to end up with the original value plus a copy in the following cell:</value>
  </data>
  <data name="GuideSamples6.Text" xml:space="preserve">
    <value>All these techniques can be combined to write more complex programs. A good idea is to try to optimize the script in order to perform as few operations as possible — generally this also means that the final code will be shorter and easier to read.</value>
  </data>
  <data name="GuideSamples7.Text" xml:space="preserve">
    <value>In this example, to print the word "Hello" two loops will be used to set two cells to values closer to the letters that will be printed. It's definitely better to use a similar approach than to repeating the + operator 72 times to print the "H" character:</value>
  </data>
  <data name="GuideSamples8.Text" xml:space="preserve">
    <value>This script will set the cells #2 and #3 to values closer to the characters that will be printed by the program, so that less operations will be needed to get to the actual values the code wants to display to the user.</value>
  </data>
  <data name="GuideSampleSimpleLoopComment1.Text" xml:space="preserve">
    <value>Copy in the cells #1 and #2</value>
  </data>
  <data name="GuideSampleSimpleLoopComment2.Text" xml:space="preserve">
    <value>Decrement the first cell</value>
  </data>
  <data name="GuideSampleSimpleLoopComment3.Text" xml:space="preserve">
    <value>Move second copy back to cell #0</value>
  </data>
  <data name="GuideSampleSimpleLoopTitle.Text" xml:space="preserve">
    <value>Copy the current value</value>
  </data>
  <data name="SendFeedbackButton.Title" xml:space="preserve">
    <value>Send feedback</value>
  </data>
  <data name="UserGuideButton.Title" xml:space="preserve">
    <value>User guide</value>
  </data>
  <data name="GuideCodeSamplesDescription" xml:space="preserve">
    <value>Some code samples to learn from</value>
  </data>
  <data name="GuideIntroductionDescription" xml:space="preserve">
    <value>Get to know the language</value>
  </data>
  <data name="GuidePBrainDescription" xml:space="preserve">
    <value>Make the language more powerful</value>
  </data>
  <data name="PBrainInfoLink.Text" xml:space="preserve">
    <value>What's this?</value>
  </data>
  <data name="UserGuide" xml:space="preserve">
    <value>Brainf*ck# guide</value>
  </data>
  <data name="UserGuideCodeSamples" xml:space="preserve">
    <value>Code samples</value>
  </data>
  <data name="UserGuideIntroduction" xml:space="preserve">
    <value>Introduction</value>
  </data>
  <data name="UserGuidePBrainExtensions" xml:space="preserve">
    <value>PBrain extensions</value>
  </data>
  <data name="WelcomePart1.Text" xml:space="preserve">
    <value>Thank you for downloading the app, I hope you'll enjoy using it!</value>
  </data>
  <data name="WelcomePart2.Text" xml:space="preserve">
    <value>Please feel free to send me an email if you have suggestions or feedback, or if you found a bug, and I'll be happy to help.</value>
  </data>
  <data name="WelcomePart4.Text" xml:space="preserve">
    <value>Before jumping straight into the app, it might be a good idea to read the user guide to make sure you remember all there is to know about the language!</value>
  </data>
  <data name="WelcomeTitle" xml:space="preserve">
    <value>Welcome to Brainf*ck#!</value>
  </data>
  <data name="DebuggingDescription" xml:space="preserve">
    <value>Find bugs in your code more easily</value>
  </data>
  <data name="GuideDebuggingComment1" xml:space="preserve">
    <value>Stop before the first loop operator</value>
  </data>
  <data name="GuideBreakpointTitle.Text" xml:space="preserve">
    <value>Break inside a loop</value>
  </data>
  <data name="GuideDebugging1.Text" xml:space="preserve">
    <value>Do you wonder what's the point of that additional gray bar on the left? You can tap it to add a breakpoint at the corresponding line in your code. This makes it easier to work on larger scripts, as a breakpoint will cause the execution to halt and will let you inspect the current memory state at that location.</value>
  </data>
  <data name="GuideDebugging2.Text" xml:space="preserve">
    <value>Here's a simple example:</value>
  </data>
  <data name="GuideDebugging3.Text" xml:space="preserve">
    <value>When you execute a script in debugging mode and hit a breakpoint, the app will show two options to control how to execute the rest of the script:</value>
  </data>
  <data name="GuideDebugging4.Text" xml:space="preserve">
    <value>Keep in mind that the script execution is only halted when the control flow manages to reach a breakpoint, so it's possible to see code with even multiple breakpoints being run straight to the end. This can indicate that one or more loop conditions are not met, so part of the script is effectively being skipped.</value>
  </data>
  <data name="GuideDebuggingContinueDescription.Text" xml:space="preserve">
    <value>Continue the execution in debugging mode</value>
  </data>
  <data name="GuideDebuggingSkipDescription.Text" xml:space="preserve">
    <value>Run the rest of the script without breakpoints</value>
  </data>
  <data name="GuideDebugging5.Text" xml:space="preserve">
    <value>As it turns out, breakpoints can help identify bugs even when they're not reached at all.</value>
  </data>
  <data name="PurchaseErrorBody" xml:space="preserve">
    <value>Something went wrong while trying to complete the purchase, try again later</value>
  </data>
  <data name="CodeNotFoundBody" xml:space="preserve">
    <value>The requested code is not present in the roaming database, try again later</value>
  </data>
  <data name="CodeNotFoundTitle" xml:space="preserve">
    <value>Code not found</value>
  </data>
  <data name="TimelineSupportTitle.Text" xml:space="preserve">
    <value>Log activities in the Timeline</value>
  </data>
  <data name="AlreadyLoadedBody" xml:space="preserve">
    <value>The requested code is already loaded in the IDE</value>
  </data>
  <data name="AlreadyLoadedTitle" xml:space="preserve">
    <value>Already loaded</value>
  </data>
  <data name="ErrorRun" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="NoCodeInterpreted" xml:space="preserve">
    <value>No code interpreted</value>
  </data>
  <data name="SnippetDuplicateValue" xml:space="preserve">
    <value>Duplicate value</value>
  </data>
  <data name="SnippetInlineLoop" xml:space="preserve">
    <value>Inline loop</value>
  </data>
  <data name="SnippetNestedLoop" xml:space="preserve">
    <value>Nested loop</value>
  </data>
  <data name="SnippetResetCell" xml:space="preserve">
    <value>Reset cell</value>
  </data>
  <data name="ED2D332A-1735-4DD9-A909-59F1587AA17F" xml:space="preserve">
    <value>Integer division</value>
  </data>
  <data name="MemorySize.Text" xml:space="preserve">
    <value>Memory size</value>
  </data>
</root>