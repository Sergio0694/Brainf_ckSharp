<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About/Build.Text" xml:space="preserve">
    <value>Build:</value>
    <comment>Keep the initial uppercase and trailing :</comment>
  </data>
  <data name="About/Description.[using:Brainf_ckSharp.Uwp.AttachedProperties]MarkdownHelper.Text" xml:space="preserve">
    <value>**Brainf*ck#** is a console and IDE for **Brainf*ck/PBrain**.

Thanks to **Andrea Salvati** for his help with the original interpreter algorithm that we designed back in 2015, **Camil Demetrescu** for the idea to port **Brainf*ck#** to Windows 10 and **Christopher Blackman** for his help during the app development.</value>
    <comment>Keep the markdown styntax, and the two newlines after the first sentence.</comment>
  </data>
  <data name="About/DevelopedBy.Text" xml:space="preserve">
    <value>Developed by</value>
  </data>
  <data name="About/Frame.Title" xml:space="preserve">
    <value>ABOUT</value>
    <comment>Keep the text uppercase</comment>
  </data>
  <data name="About/SupportUs.Text" xml:space="preserve">
    <value>Support us</value>
  </data>
  <data name="BracketsFormattingStyle/NewLine" xml:space="preserve">
    <value>New line</value>
  </data>
  <data name="BracketsFormattingStyle/SameLine" xml:space="preserve">
    <value>Same line</value>
  </data>
  <data name="CodeLibrary/CopyToClipboard.Text" xml:space="preserve">
    <value>Copy to clipboard</value>
  </data>
  <data name="CodeLibrary/Delete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="CodeLibrary/FavoritePlaceholder.Text" xml:space="preserve">
    <value>Tap here to pick, open a file and favorite it!</value>
  </data>
  <data name="CodeLibrary/Frame.Title" xml:space="preserve">
    <value>CODE LIBRARY</value>
    <comment>Keep the text uppercase</comment>
  </data>
  <data name="CodeLibrary/HistoryPlaceholder.Text" xml:space="preserve">
    <value>Tap here to pick and open a file!</value>
  </data>
  <data name="CodeLibrary/RemoveFromLibrary.Text" xml:space="preserve">
    <value>Remove from library</value>
  </data>
  <data name="CodeLibrary/Share.Text" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="CodeSnippets/DuplicateValue" xml:space="preserve">
    <value>DuplicateValue</value>
  </data>
  <data name="CodeSnippets/ResetCell" xml:space="preserve">
    <value>Reset cell</value>
  </data>
  <data name="Console/Exception.Text" xml:space="preserve">
    <value>exception:</value>
    <comment>Keep the initial lowercase and the trailing :</comment>
  </data>
  <data name="Console/Restart.Text" xml:space="preserve">
    <value>RESTART</value>
    <comment>Keep the text uppercase</comment>
  </data>
  <data name="Console/Run.Text" xml:space="preserve">
    <value>run:</value>
    <comment>Keep the initial lowercase and the trailing :</comment>
  </data>
  <data name="Console/SyntaxError.Text" xml:space="preserve">
    <value>syntax error:</value>
    <comment>Keep the initial lowercase and the trailing :</comment>
  </data>
  <data name="ExitCode/DuplicateFunctionDefinition" xml:space="preserve">
    <value>Duplicate function definition</value>
  </data>
  <data name="ExitCode/LowerBoundExceeded" xml:space="preserve">
    <value>Lower bound exceeded</value>
  </data>
  <data name="ExitCode/MaxValueExceeded" xml:space="preserve">
    <value>Maximum value exceeded</value>
  </data>
  <data name="ExitCode/NegativeValue" xml:space="preserve">
    <value>Negative value</value>
  </data>
  <data name="ExitCode/StackLimitExceeded" xml:space="preserve">
    <value>Stack limit exceeded</value>
  </data>
  <data name="ExitCode/StdinBufferExhausted" xml:space="preserve">
    <value>Stdin buffer exhausted</value>
  </data>
  <data name="ExitCode/StdoutBufferLimitExceeded" xml:space="preserve">
    <value>Stdout buffer limit exceeded</value>
  </data>
  <data name="ExitCode/ThresholdExceeded" xml:space="preserve">
    <value>Threshold exceeded</value>
  </data>
  <data name="ExitCode/UndefinedFunctionCalled" xml:space="preserve">
    <value>Undefined function called</value>
  </data>
  <data name="ExitCode/UpperBoundExceeded" xml:space="preserve">
    <value>Upper bound exceeded</value>
  </data>
  <data name="HeaderPanel/Console.Text" xml:space="preserve">
    <value>Console</value>
  </data>
  <data name="HeaderPanel/IDE.Text" xml:space="preserve">
    <value>IDE</value>
  </data>
  <data name="IdeResults/AtPosition" xml:space="preserve">
    <value>at position {0}</value>
    <comment>The {0} will be a number, move it if needed. Leave the initial lowercase, as there's other text before that (specifically, the operator it's referring to).</comment>
  </data>
  <data name="IdeResults/DefinedFunctions" xml:space="preserve">
    <value>{0} defined function(s)</value>
    <comment>The {0} will be a number, move it if needed.</comment>
  </data>
  <data name="IdeResults/Frame.Title" xml:space="preserve">
    <value>RUN</value>
    <comment>Keep the text uppercase. This is the title of the page with results of executing a script in the IDE.</comment>
  </data>
  <data name="IdeResults/MemoryCells" xml:space="preserve">
    <value>{0} memory cells</value>
    <comment>The {0} will be a number, move it if needed. The number will always be at least 16.</comment>
  </data>
  <data name="IdeResults/Operators" xml:space="preserve">
    <value>{0} operator(s)</value>
    <comment>The {0} will be a number, move it if needed.</comment>
  </data>
  <data name="IdeResults/OperatorsInTime" xml:space="preserve">
    <value>{0} operator(s) in {1}</value>
    <comment>The {0} will be a number, the {1} will be a time period in the hh:mm:ss.ffff format. Move both if needed.</comment>
  </data>
  <data name="IdeResults/StackFrames" xml:space="preserve">
    <value>{0} stack frame(s)</value>
    <comment>The {0} will be a number, move it if needed.</comment>
  </data>
  <data name="IdeResults/UppercaseAtPosition" xml:space="preserve">
    <value>At position {0}</value>
    <comment>The {0} will be a number, move it if needed.</comment>
  </data>
  <data name="IdeResultSection/BreakpointReached" xml:space="preserve">
    <value>Breakpoint reached</value>
  </data>
  <data name="IdeResultSection/ExceptionType" xml:space="preserve">
    <value>Exception type</value>
  </data>
  <data name="IdeResultSection/FaultingOperator" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="IdeResultSection/FunctionDefinitions" xml:space="preserve">
    <value>Function definitions</value>
  </data>
  <data name="IdeResultSection/MemoryState" xml:space="preserve">
    <value>Memory state</value>
  </data>
  <data name="IdeResultSection/SourceCode" xml:space="preserve">
    <value>Source code</value>
  </data>
  <data name="IdeResultSection/StackTrace" xml:space="preserve">
    <value>Stack trace</value>
  </data>
  <data name="IdeResultSection/Statistics" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="IdeResultSection/Stdout" xml:space="preserve">
    <value>Stdout</value>
  </data>
  <data name="OverflowMode/ByteWithNoOverflow" xml:space="preserve">
    <value>Byte, no overflow</value>
  </data>
  <data name="OverflowMode/ByteWithOverflow" xml:space="preserve">
    <value>Byte [0, 255]</value>
  </data>
  <data name="OverflowMode/UshortWithNoOverflow" xml:space="preserve">
    <value>Signed short, no overflow</value>
  </data>
  <data name="OverflowMode/UshortWithOverflow" xml:space="preserve">
    <value>Signed short [0, 65535]</value>
  </data>
  <data name="ReviewPrompt/Body.Text" xml:space="preserve">
    <value>Thank you for downloading **Brainf\*ck#**!

Are you enjoying it so far?</value>
    <comment>Keep the markdown styntax, and the two newlines after the first sentence.</comment>
  </data>
  <data name="ReviewPrompt/Contact.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Contact the developer</value>
  </data>
  <data name="ReviewPrompt/Frame.Title" xml:space="preserve">
    <value>ENJOYING THE APP?</value>
    <comment>Keep the text uppercase</comment>
  </data>
  <data name="ReviewPrompt/Review.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Leave a review in the Store</value>
  </data>
  <data name="Settings/BracketsOnNewLine.Text" xml:space="preserve">
    <value>Brackets position</value>
  </data>
  <data name="Settings/ClearStdinBufferOnExecution.Text" xml:space="preserve">
    <value>Clear stdin buffer on execution</value>
  </data>
  <data name="Settings/Frame.Title" xml:space="preserve">
    <value>SETTINGS</value>
    <comment>Keep the text uppercase</comment>
  </data>
  <data name="Settings/MemorySize.Text" xml:space="preserve">
    <value>Memory size</value>
  </data>
  <data name="Settings/OverflowMode.Text" xml:space="preserve">
    <value>Overflow mode</value>
  </data>
  <data name="Settings/RenderWhitespaces.Text" xml:space="preserve">
    <value>Render whitespaces</value>
  </data>
  <data name="Settings/SettingsAvailable" xml:space="preserve">
    <value>{0} settings available</value>
    <comment>The {0} will be a number, move it if needed</comment>
  </data>
  <data name="Settings/ShowPBrainOperators.Text" xml:space="preserve">
    <value>Show PBrain operators</value>
  </data>
  <data name="Settings/Theme.Text" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="Settings/UnlockTheme.Text" xml:space="preserve">
    <value>Tap to unlock</value>
  </data>
  <data name="Settings/WhatsThis.Text" xml:space="preserve">
    <value>What's this?</value>
  </data>
  <data name="SettingsSection/Ide" xml:space="preserve">
    <value>IDE</value>
  </data>
  <data name="SettingsSection/Interpreter" xml:space="preserve">
    <value>Interpreter</value>
  </data>
  <data name="SettingsSection/UI" xml:space="preserve">
    <value>UI</value>
  </data>
  <data name="Shell/About.Label" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="Shell/Clear.Label" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="Shell/ClearScreen.Label" xml:space="preserve">
    <value>Clear screen</value>
  </data>
  <data name="Shell/Debug.Label" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="Shell/Delete.Label" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Shell/Down.Label" xml:space="preserve">
    <value>Down</value>
  </data>
  <data name="Shell/Down.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Down</value>
  </data>
  <data name="Shell/Left.Label" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="Shell/Left.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="Shell/Move.Label" xml:space="preserve">
    <value>Move</value>
  </data>
  <data name="Shell/NewFile.Label" xml:space="preserve">
    <value>New file</value>
  </data>
  <data name="Shell/NewLine.Label" xml:space="preserve">
    <value>New line</value>
  </data>
  <data name="Shell/OpenCodeLibrary.Label" xml:space="preserve">
    <value>Open code library</value>
  </data>
  <data name="Shell/OpenFile.Label" xml:space="preserve">
    <value>Open file</value>
  </data>
  <data name="Shell/Redo.Label" xml:space="preserve">
    <value>Redo</value>
  </data>
  <data name="Shell/RepeatLastScript.Label" xml:space="preserve">
    <value>Repeat last script</value>
  </data>
  <data name="Shell/Restart.Label" xml:space="preserve">
    <value>Restart</value>
  </data>
  <data name="Shell/Right.Label" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="Shell/Right.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="Shell/Run.Label" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="Shell/Save.Label" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Shell/SaveAs.Label" xml:space="preserve">
    <value>Save as</value>
  </data>
  <data name="Shell/Settings.Label" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Shell/Undo.Label" xml:space="preserve">
    <value>Undo</value>
  </data>
  <data name="Shell/UnicodeCharacters.Label" xml:space="preserve">
    <value>Unicode characters</value>
  </data>
  <data name="Shell/Up.Label" xml:space="preserve">
    <value>Up</value>
  </data>
  <data name="Shell/Up.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Up</value>
  </data>
  <data name="Shell/UserGuide.Label" xml:space="preserve">
    <value>User guide</value>
  </data>
  <data name="StackTrace/At" xml:space="preserve">
    <value>at</value>
    <comment>Keep the initial lowercase</comment>
  </data>
  <data name="StackTrace/Frames" xml:space="preserve">
    <value>frames</value>
    <comment>Keep the initial lowercase</comment>
  </data>
  <data name="StdinHeader/KeyboardHeader.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Virtual keyboard</value>
  </data>
  <data name="StdinHeader/MemoryViewer.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Memory viewer</value>
  </data>
  <data name="StdinHeader/Stdin.PlaceholderText" xml:space="preserve">
    <value>Stdin buffer</value>
  </data>
  <data name="SyntaxValidationResult/Operator" xml:space="preserve">
    <value>operator</value>
    <comment>This means "operator" or "position", and it will be followed by a number. Keep the initial lowercase.</comment>
  </data>
  <data name="UnicodeInterval/ControlCharacters" xml:space="preserve">
    <value>Control characters</value>
  </data>
  <data name="UnicodeInterval/NonVisible" xml:space="preserve">
    <value>Non visible</value>
  </data>
  <data name="UnicodeMap/Frame.Title" xml:space="preserve">
    <value>UNICODE MAP</value>
    <comment>Keep the text uppercase</comment>
  </data>
  <data name="UserGuide/BreakpointContinue.Text" xml:space="preserve">
    <value>Continue the execution in debugging mode</value>
  </data>
  <data name="UserGuide/BreakpointIntroduction1.Text" xml:space="preserve">
    <value>Do you wonder what's the point of that additional gray bar on the left? You can tap it to add a breakpoint at the corresponding line in your code. This makes it easier to work on larger scripts, as a breakpoint will cause the execution to halt and will let you inspect the current memory state at that location.</value>
  </data>
  <data name="UserGuide/BreakpointIntroduction2.Text" xml:space="preserve">
    <value>Here's a simple example:</value>
  </data>
  <data name="UserGuide/BreakpointIntroduction3.Text" xml:space="preserve">
    <value>When you execute a script in debugging mode and hit a breakpoint, the app will show two options to control how to execute the rest of the script:</value>
  </data>
  <data name="UserGuide/BreakpointIntroduction4.Text" xml:space="preserve">
    <value>Keep in mind that the script execution is only halted when the control flow manages to reach a breakpoint, so it's possible to see code with even multiple breakpoints being run straight to the end. This can indicate that one or more loop conditions are not met, so part of the script is effectively being skipped.</value>
  </data>
  <data name="UserGuide/BreakpointIntroduction5.Text" xml:space="preserve">
    <value>As it turns out, breakpoints can help identify bugs even when they're not reached at all.</value>
  </data>
  <data name="UserGuide/BreakpointSkip.Text" xml:space="preserve">
    <value>Run the rest of the script without breakpoints</value>
  </data>
  <data name="UserGuide/Introduction1.Text" xml:space="preserve">
    <value>Brainf*ck is an esoteric programming language invented in 1993 by Urban Müller. The language replicates a Turing machine, as the state of the interpreter is only described of a memory array and a memory pointer than can move back and forth and change values of the memory cells, as it passes over them.</value>
  </data>
  <data name="UserGuide/Introduction2.Text" xml:space="preserve">
    <value>A Brainf*ck program is made up of only 8 operators:</value>
  </data>
  <data name="UserGuide/Operator1.Description" xml:space="preserve">
    <value>Moves the memory pointer to the next cell</value>
  </data>
  <data name="UserGuide/Operator2.Description" xml:space="preserve">
    <value>Moves the memory pointer back</value>
  </data>
  <data name="UserGuide/Operator3.Description" xml:space="preserve">
    <value>Increments the value of the current cell</value>
  </data>
  <data name="UserGuide/Operator4.Description" xml:space="preserve">
    <value>Decrements the value of the current cell</value>
  </data>
  <data name="UserGuide/Operator5.Description" xml:space="preserve">
    <value>Starts a loop on the current cell, only if its value is greater than 0</value>
  </data>
  <data name="UserGuide/Operator6.Description" xml:space="preserve">
    <value>Loops and executes the current operators sequence if the value of the current cell is greater than 0</value>
  </data>
  <data name="UserGuide/Operator7.Description" xml:space="preserve">
    <value>Prints the Unicode character corresponding to the value of the current memory cell. The Unicode table is available in the app, under the … menu</value>
  </data>
  <data name="UserGuide/Operator8.Description" xml:space="preserve">
    <value>Reads a Unicode character from the Stdin buffer and stores its value in the current memory cell</value>
  </data>
  <data name="UserGuide/PBrainIntroduction.Text" xml:space="preserve">
    <value>PBrain is an extension of the Brainf*ck language, created by Paul M. Parks. It adds support for functions, with the addition of the following operators:</value>
  </data>
  <data name="UserGuide/PBrainOperator1.Description" xml:space="preserve">
    <value>Defines a function bound to the value of the current memory cell</value>
  </data>
  <data name="UserGuide/PBrainOperator2.Description" xml:space="preserve">
    <value>Ends the current function definition</value>
  </data>
  <data name="UserGuide/PBrainOperator3.Description" xml:space="preserve">
    <value>Calls the function bound to the value of the current memory cell</value>
  </data>
  <data name="UserGuide/PBrainWarning.Text" xml:space="preserve">
    <value>A function definition must contain at least a Brainf*ck operator and its body can't be empty. Moreover, it is not possible to define nested functions.</value>
  </data>
  <data name="UserGuide/SamplesIntroduction1.Text" xml:space="preserve">
    <value>A good strategy to learn how to code in Brainf*ck, as with everything else, is to start from simpler and smaller programs and to make them more complex along the way.</value>
  </data>
  <data name="UserGuide/SamplesIntroduction2.Text" xml:space="preserve">
    <value>For example, a common operation is to reset the value of the current cell, whatever it may be.</value>
  </data>
  <data name="UserGuide/SamplesIntroduction3.Text" xml:space="preserve">
    <value>A simple loop can be used in this case:</value>
  </data>
  <data name="UserGuide/SamplesIntroduction4.Text" xml:space="preserve">
    <value>In many situations it is useful to make a copy of the current cell, to be able to perform some operations with its value, without losing track of the initial state of the memory cell.</value>
  </data>
  <data name="UserGuide/SamplesIntroduction5.Text" xml:space="preserve">
    <value>To achieve this, it is possible to create two copies of the current value, resetting the current cell, and then move the second copy back to the first cell, to end up with the original value plus a copy in the following cell:</value>
  </data>
  <data name="UserGuide/SamplesIntroduction6.Text" xml:space="preserve">
    <value>All these techniques can be combined to write more complex programs. A good idea is to try to optimize the script in order to perform as few operations as possible — generally this also means that the final code will be shorter and easier to read.</value>
  </data>
  <data name="UserGuide/SamplesIntroduction7.Text" xml:space="preserve">
    <value>In this example, to print the word "Hello" two loops will be used to set two cells to values closer to the letters that will be printed. It's definitely better to use a similar approach than to repeating the + operator 72 times to print the 'H' character:</value>
  </data>
  <data name="UserGuide/SamplesIntroduction8.Text" xml:space="preserve">
    <value>This script will set the cells #2 and #3 to values closer to the characters that will be printed by the program, so that less operations will be needed to get to the actual values the code wants to display to the user.</value>
  </data>
  <data name="UserGuideSection/Debugging/Description" xml:space="preserve">
    <value>Find errors more easily with debugging features</value>
  </data>
  <data name="UserGuideSection/Debugging/Title" xml:space="preserve">
    <value>Debugging</value>
  </data>
  <data name="UserGuideSection/Introduction/Description" xml:space="preserve">
    <value>Learn how to use the Brainf*ck language</value>
  </data>
  <data name="UserGuideSection/Introduction/Title" xml:space="preserve">
    <value>Introduction</value>
  </data>
  <data name="UserGuideSection/PBrain/Description" xml:space="preserve">
    <value>Do more by using the PBrain extension operators</value>
  </data>
  <data name="UserGuideSection/PBrain/Title" xml:space="preserve">
    <value>PBrain</value>
  </data>
  <data name="UserGuideSection/Samples/Description" xml:space="preserve">
    <value>Some code samples to learn the basics</value>
  </data>
  <data name="UserGuideSection/Samples/Title" xml:space="preserve">
    <value>Samples</value>
  </data>
</root>